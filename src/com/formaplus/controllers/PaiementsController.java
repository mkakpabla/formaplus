package com.formaplus.controllers;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import java.net.URL;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

import com.formaplus.dao.DbConnector;
import com.formaplus.dao.models.Etudiant;
import com.formaplus.dao.models.Formation;
import com.formaplus.dao.models.Paiement;
import com.formaplus.dao.repositories.RepositoryFactory;
import com.formaplus.utils.AlertMessage;
import com.formaplus.utils.JasperViewerFX;
import com.formaplus.utils.LoadView;
import com.formaplus.utils.Reporting;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.layout.AnchorPane;

import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import net.sf.jasperreports.engine.JasperPrint;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.TableColumn;

public class PaiementsController implements Initializable {
	@FXML
	private BorderPane borderPane;
	@FXML
	private AnchorPane mainAnchorePane;
	@FXML
	private TableView<Paiement> payTable;
	@FXML
	private TableColumn<Paiement, Integer> idPay;
	@FXML
	private TableColumn<Paiement, Etudiant> etudiantColumn;
	@FXML
	private TableColumn<Paiement, Formation> formationColumn;
	@FXML
	private TableColumn<Paiement, Double> montantPay;
	@FXML
	private TableColumn<Paiement, String> datePay;
	@FXML
	private Button editButton;
	@FXML
	private Button deleteButton;
	@FXML
	private Button printButton;
	@FXML
	private Button addButton;
	
	private ObservableList<Paiement> payListe;
	
	
	
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		etudiantColumn.setCellValueFactory(cellData -> cellData.getValue().etudiantProperty());
		montantPay.setCellValueFactory(cellData -> cellData.getValue().montantPayProperty().asObject());
		datePay.setCellValueFactory(new PropertyValueFactory<Paiement, String>("datePay"));
		this.formationColumn.setCellValueFactory(cellData -> cellData.getValue().inscriptionProperty().get().formationProperty());
		this.loadPay();
		
	}
	
	private void loadPay() {
		this.payListe = RepositoryFactory.getPaiementRepository().getAll();
		this.payTable.setItems(this.payListe);
	}
	

	// Event Listener on Button[#editButton].onAction
	@FXML
	public void handleEditButtonAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#deleteButton].onAction
	@FXML
	public void handleDeleteButtonAction(ActionEvent event) {
		Paiement pay = payTable.getSelectionModel().getSelectedItem();
		if(AlertMessage.showConfirm("Voulez-vous vraiment supprimer ce paiement ?")) {
			if(RepositoryFactory.getPaiementRepository().delete(pay.getIdPay())) {
				AlertMessage.showInformation("Le paiement a été supprimer");
			} else AlertMessage.showInformation("Opération annulée");
		}
	}
	// Event Listener on Button[#printButton].onAction
	@FXML
	public void handlePrintButtonAction(ActionEvent event) {
		Paiement pay = payTable.getSelectionModel().getSelectedItem();
		if(pay != null) {
			try(ResultSet rset = DbConnector.executeQuery("SELECT * FROM insc_pay_status WHERE id_insc = ?", pay.getInscription().getIdInsc())) {
				if(rset.next()) {
					Map<String, Object> parameters = new HashMap<String, Object>();
					parameters.put("E_NAME", pay.getInscription().getEtudiant().toString());
					parameters.put("E_EMAIL", pay.getInscription().getEtudiant().getEmailEtu());
					parameters.put("E_PHONE", String.valueOf(pay.getInscription().getEtudiant().getTelEtu()));
					parameters.put("F_SESSION", pay.getInscription().getSession().getLibSession());
					parameters.put("F_NAME", pay.getInscription().getFormation().getLibFormation());
					parameters.put("F_PRIX", String.valueOf(pay.getInscription().getFormation().getPrixFormation()));
					parameters.put("P_NUM", String.valueOf(pay.getIdPay()));
					parameters.put("P_MONTANT", String.valueOf(pay.getMontantPay()));
					parameters.put("P_DATE", String.valueOf(pay.getDatePay()));
					parameters.put("P_RESTE", rset.getString("a_verser"));
					parameters.put("P_VERSE", rset.getString("deja_verse"));
					// Génération du raport
					JasperPrint jasperPrint =  Reporting.getJasperPrint("fiche_paiement.jrxml", parameters);
					JasperViewerFX view = new JasperViewerFX();
					view.viewReport("Fiche de paiement", jasperPrint, printButton);
				} else {
					AlertMessage.showInformation("Le numéro de l'inscription entré n'est pas valide");
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else AlertMessage.showInformation("Veillez selectionner un paiement");
		
		
	}
	// Event Listener on Button[#addButton].onAction
	@FXML
	public void handleAddButtonAction(ActionEvent event) {
		Stage dialogStage = LoadView.getModalStage(addButton, "AddPaiement", "Enrégistrer un paiement");
		dialogStage.setOnCloseRequest(evt -> loadPay());
		dialogStage.showAndWait();
	}
	
}
